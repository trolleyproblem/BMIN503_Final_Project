---
title: "Deep Learning for Spirometry"
subtitle: "BMIN503/EPID600 Final Project"
author: "Emily Moin"
format: html
editor: visual
number-sections: true
embed-resources: true
---

------------------------------------------------------------------------

Use this template to complete your project throughout the course. Your Final Project presentation will be based on the contents of this document. Replace the title/name above and text below with your own, but keep the headers. Feel free to change the theme and other display settings, although this is not required.

## Overview {#sec-overview}

Give a brief a description of your project and its goal(s), what data you are using to complete it, and what two faculty/staff in different fields you have spoken to about your project with a brief summary of what you learned from each person. Include a link to your final project GitHub repository.

## Introduction {#sec-introduction}

Describe the problem addressed, its significance, and some background to motivate the problem. This should extend what is in the @sec-overview.

Explain why your problem is interdisciplinary, what fields can contribute to its understanding, and incorporate background related to what you learned from meeting with faculty/staff.

## Methods {#sec-methods}

Describe the data used and general methodological approach used to address the problem described in the @sec-introduction. Subsequently, incorporate full R code necessary to retrieve and clean data, and perform analysis. Be sure to include a description of code so that others (including your future self) can understand what you are doing and why.

```{r Load libraries and set seed}
#| output: false
library(tidyverse)
library(haven)
library(rspiro)
library(here)

set.seed(36)
```

```{r Load spirometry data}
spirometry1 <- read_sas(here::here("data/spxraw_e.sas7bdat"))
spirometry2 <- read_sas(here::here("data/spxraw_f.sas7bdat"))
spirometry3 <- read_sas(here::here("data/spxraw_g.sas7bdat"))

all_spirometry <- bind_rows(spirometry1, spirometry2, spirometry3)
rm(spirometry1,spirometry2,spirometry3)

all_spirometry <- all_spirometry %>% rename(seqn = SEQN)
```

```{r Load body measurement data}
bm1 <- read_xpt(here::here("data/BMX_E.XPT")) %>% select(SEQN, BMXWT, BMXHT)
bm2 <- read_xpt(here::here("data/BMX_F.XPT")) %>% select(SEQN, BMXWT, BMXHT)
bm3 <- read_xpt(here::here("data/BMX_G.XPT")) %>% select(SEQN, BMXWT, BMXHT)

all_bm <- bind_rows(bm1, bm2, bm3)
rm(bm1, bm2, bm3)

all_bm <- all_bm %>%
  rename(seqn = SEQN,
         wt = BMXWT,
         ht = BMXHT)
```

```{r Load mortality data}
mort1 <- read_fwf(file=here::here("data/NHANES_2007_2008_MORT_2019_PUBLIC.dat"),
                col_types = "iiiiiiii",
                fwf_cols(seqn = c(1,6),
                         eligstat = c(15,15),
                         mortstat = c(16,16),
                         ucod_leading = c(17,19),
                         diabetes = c(20,20),
                         hyperten = c(21,21),
                         permth_int = c(43,45),
                         permth_exm = c(46,48)
                ),
                na = c("", ".")
)

mort2 <- read_fwf(file=here::here("data/NHANES_2009_2010_MORT_2019_PUBLIC.dat"),
                  col_types = "iiiiiiii",
                  fwf_cols(seqn = c(1,6),
                           eligstat = c(15,15),
                           mortstat = c(16,16),
                           ucod_leading = c(17,19),
                           diabetes = c(20,20),
                           hyperten = c(21,21),
                           permth_int = c(43,45),
                           permth_exm = c(46,48)
                  ),
                  na = c("", ".")
)

mort3 <- read_fwf(file=here::here("data/NHANES_2011_2012_MORT_2019_PUBLIC.dat"),
                  col_types = "iiiiiiii",
                  fwf_cols(seqn = c(1,6),
                           eligstat = c(15,15),
                           mortstat = c(16,16),
                           ucod_leading = c(17,19),
                           diabetes = c(20,20),
                           hyperten = c(21,21),
                           permth_int = c(43,45),
                           permth_exm = c(46,48)
                  ),
                  na = c("", ".")
)

all_mortality <- bind_rows(mort1, mort2, mort3)
rm(mort1, mort2, mort3)
```

```{r Load demographic data}
demo1 <- read_xpt(here::here("data/DEMO_E.XPT"))
demo2 <- read_xpt(here::here("data/DEMO_F.XPT"))
demo3 <- read_xpt(here::here("data/DEMO_G.XPT"))

# The demographic variables are different across NHANES years
# so for now I will create a subset with only variables of interest to me

demo1 <- demo1 %>% select(SEQN, RIDAGEEX, RIDRETH1, RIAGENDR)
demo2 <- demo2 %>% select(SEQN, RIDAGEEX, RIDRETH1, RIAGENDR)
demo3 <- demo3 %>% select(SEQN, RIDEXAGM, RIDRETH1, RIAGENDR) %>%
  rename(RIDAGEEX = RIDEXAGM)

all_demo <- bind_rows(demo1, demo2, demo3)
rm(demo1, demo2, demo3)

all_demo <-
  all_demo %>% rename(
  seqn = SEQN,
  age_months = RIDAGEEX,
  gender = RIAGENDR,
  race = RIDRETH1
)

all_demo <- all_demo %>%
  mutate(age_years = age_months/12,
         gender = factor(gender),
         race = factor(race))

```

```{r Load PFT measurements}
pft1 <- read_xpt(here::here("data/SPX_E.xpt"))
pft2 <- read_xpt(here::here("data/SPX_F.xpt"))
pft3 <- read_xpt(here::here("data/SPX_G.xpt"))

all_pft <- bind_rows(pft1, pft2, pft3)
rm(pft1, pft2, pft3)

all_pft <- all_pft %>% rename(seqn = SEQN)
```

```{r Load FENO values}

feno1 <- read_xpt(here::here("data/ENX_E.xpt"))
feno2 <- read_xpt(here::here("data/ENX_F.xpt"))
feno3 <- read_xpt(here::here("data/ENX_G.xpt"))

all_feno <- bind_rows(feno1, feno2, feno3)
rm(feno1, feno2, feno3)

all_feno <- all_feno %>% rename(seqn = SEQN)

```


```{r Cohort derivation}

# To identify cohort, we will filter on inclusion criteria (age >=18) and
# clean raw spirometry samples - remaining patient IDs will then be
# used to filter all other tables

# Store number of patients at every step of filtering for future study
# flowchart
update_patient_list <- function(included, step, n) {
  
  included <- included %>% add_row(
    step = step,
    included_n = n
  )
  
  return(included)
  
}

included_patients <- tibble(
  step = "initial",
  included_n = all_spirometry %>% count(seqn) %>% nrow()
)

# Exclude children

all_spirometry <- 
  all_spirometry %>%
  left_join(all_demo, by = "seqn") %>%
  filter(age_years >= 18)

included_patients <- 
  update_patient_list(included_patients,
                      "age >= 18", all_spirometry %>% count(seqn) %>% nrow())

# Exclude maneuvers unacceptable by ATS criteria

all_spirometry <-
  all_spirometry %>%
  filter(SPAACC=="Y")

included_patients <- 
  update_patient_list(included_patients,
                      "acceptable by ATS", all_spirometry %>% count(seqn) %>% nrow())

# Exclude maneuvers that are "too short"
# How short is too short?

# Visualize distribution of curve length
# Recall 1 point = 0.01 sec

all_spirometry %>%
  ggplot(aes(x=SPXPTS)) + geom_histogram(binwidth=10)

all_spirometry %>%
  filter(SPXPTS < 250) %>%
  ggplot(aes(x=SPXPTS)) + geom_histogram(binwidth=1)

# There's a clear cutoff at 150 (1.5 seconds) - for now, we'll use that
# as our minimum length

all_spirometry <-
  all_spirometry %>%
  filter(SPXPTS >=150)

included_patients <- 
  update_patient_list(included_patients,
                      "at least 1.5 sec", all_spirometry %>% count(seqn) %>% nrow())

# Examinee effort - from clinical experience, both A and B are informative,
# but we'll exclude C

all_spirometry <-
  all_spirometry %>%
  filter(SPAQEFF=="A" | SPAQEFF=="B")

included_patients <- 
  update_patient_list(included_patients,
                      "A or B effort", all_spirometry %>% count(seqn) %>% nrow())

# Exclude post bronchodilator curves for now

all_spirometry <-
  all_spirometry %>%
  filter(SPATTYPE=="Pre")

# Note - it may seem non-intuitive that this would reduce the n, however
# patients who are dropped at this step had pre-bronchodilator curves that were
# already filtered for other quality reasons
included_patients <- 
  update_patient_list(included_patients,
                      "exclude BD testing", all_spirometry %>% count(seqn) %>% nrow())

# For simplicity and to avoid accounting for clustering in analyses, will limit to
# one curve per patient. Will choose patient's "best" curve based on criteria:
# 1. A effort if available
# 2. Plateau achieved if available
# 3. Length closer to median length

median_length <- median(all_spirometry$SPXPTS)

all_spirometry <-
  all_spirometry %>% 
  mutate(order_by_length = abs(SPXPTS - median_length)) %>%
  mutate(order_by_effort = case_when(
    SPAQEFF=="A" ~ 0,
    SPAQEFF=="B" ~ 1
  )) %>%
  mutate(order_by_plateau = case_when(
    SPAPLAT=="Y" ~ 0,
    SPAPLAT=="N" ~ 1
  )) %>%
  arrange(seqn,order_by_effort, order_by_plateau, order_by_length) %>%
  group_by(seqn) %>%
  filter(row_number()==1) %>%
  select(-order_by_effort, -order_by_plateau, -order_by_length) %>%
  ungroup()

```
```{r}
# Prep data for export to Python

# Sample size is large, so rather than 80/20 training/validation split we will
# use a fixed validation sample of 1000 curves and export separate files

validation_set <-
  all_spirometry %>%
  slice_sample(n = 1000, replace = FALSE) %>%
  select(seqn, SPXRAW, gender) %>%
  write_csv(here::here("data/validation_set.csv"))

training_set <-
  all_spirometry %>%
  filter(!(seqn %in% validation_set$seqn)) %>%
  select(seqn, SPXRAW, gender) %>%
  write_csv(here::here("data/training_set.csv"))



```

## Results {#sec-results}

Describe your results and include relevant tables, plots, and code/comments used to obtain them. You may refer to the @sec-methods as needed. End with a brief conclusion of your findings related to the question you set out to address. You can include references if you'd like, but this is not required.

## Conclusion

This the conclusion. The @sec-results can be invoked here.
